#!/usr/bin/env python
#
# Outputs a C header file containing definitions of byte arrays
# that can be used to map values from 0-127 to other values.

import os.path
import sys


def halfway_between(a, b):
    return int((a + b) / 2)


def linear(x):
    return x


def exponential(x):
    val = int((x * x) / 127)
    if x > 0 and val == 0:
        val = 1
    return val


# Halfway between linear and exponential.
def half_exponential(x):
    return halfway_between(linear(x), exponential(x))


def inverse_exponential(x):
    val = 127 - x
    val = int(127 - (val * val) / 127)
    return val


# Halfway between linear and inverse exponential.
def half_inverse_exponential(x):
    return halfway_between(linear(x), inverse_exponential(x))


curves = [
    (linear, "linear"),
    (exponential, "exponential"),
    (half_exponential, "half_exponential"),
    (inverse_exponential, "inverse_exponential"),
    (half_inverse_exponential, "half_inverse_exponential"),
]


def output_curve(func, name):
    print(f"unsigned char {name}_curve[128] = {{")
    vals = [str(func(i)) for i in range(128)]
    for i in range(8):
        print(f"  {', '.join(vals[i * 16 : (i + 1) * 16])},")
    print("};\n")


def generate_curves(script_name):
    print("#ifndef GENERATED_CURVES_H")
    print("#define GENERATED_CURVES_H\n")
    print(f"/* This file is generated by {script_name}. Do not edit. */\n")
    for curve in curves:
        output_curve(*curve)
    print("#endif /* GENERATED_CURVES_H */")


if __name__ == "__main__":
    generate_curves(os.path.basename(sys.argv[0]))
